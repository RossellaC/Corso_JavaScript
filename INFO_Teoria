Javascript è noto per rendere le pagine dinamiche e farle interaggire con l'utente
guidato dall'evento (event driven --> fare un qualcosa quando si fa altro)
é un linguaggio interpretato,infatti basta un browser non serve un compilatore.
E' tipizzato cioè non bisogna specializzare che tipo di variabile è.
Client_side con (NOde.js)e anche per il front-end.

var --> dichiarazione variabile

###### OPERATORI DI COMPARAZIONE ####
 === operatore di identicità
 ==  operatore di uguaglianza

 === vs == l'operatore di uguaglianza non riconosce il tipo
            5 == '5' return true
            5 === '5' return false;

NEGARE L'identicità (===)  --> !==

OERATORE TERNARIO ' ? ' --> L'Ooperatore ternario è un operatore di comparazione
          composto da tre parti --> prima parte si mette  una comparazione (5>10)
                                --> parte centrale ' ? '
                                --> seconda parte : se la prima parte è vera assegnare il valore altrimenti assegnare l'altro valore
                                es --> 5 >10 ? 'vero': 'falso' (quindi se 5 >10 assegnare vero altrimenti falso)


TYPE operatore (operatore di tipo  ) sono utilizzati per vedere che tipo di variabile abbiamo
typeof  --> var numero =2;  console.log(typeof numero) --> return number
instanceof --> serve per vedere se un oggetto deriva da un altro
           var numero=[]; console.log(numero instanceof Array) --> return vero


#######  DICHIARAZIONE VARIABILI  #### ( parole chiavi per dichiarare una variabile  var -- let -- const )

prima di ECMAScript6 (o ES6) è la specifica tecnica di un linguaggio di scripting, standardizzata e mantenuta da ECMA International
veniva utilizzata solo var

Const --> si utilizza se la variabile non deve essere cambiata di valore
      se la variabile è un oggetto o array posso cambiare /monipolare le sue proprietà
      const obj={};
      obj.x=2;
      obj.y='6';

QUANDO NON è ASSEGNATO NESSUN VAROLE ALLA VARIABILE JAVASCRIPT ASSEGNA DUE VALORI
--> undefined (indefinito) vuol dire che non c'è nessu valore aspettato per quella VARIABILE
--> null (nullo)  quando si aspetta un oggetto ma non lo trova

NELL'AMBITO DELLO SCOPE (ambito di visibilità di una variabile)
in questo ambito const e let si comportano allo stesso modo

################# let vs var ############
var-->per creare un'ambiente interno devo creare una funzione
let-->er creare un'ambiente interno devo creare un blocco if ... tutto ciò che può essere racchiuso tra parentesi

tutti gli altri linguaggi utilizzano il block scope e javascript prima ES6 function scope  per tale motivo con ES6 è nata la variabile let

############## STRINGHE ########
3 modi di dichiarare una stringa
' ' --- " " ---  ` ` (backtick  )

se devo tornare a capo poichè la stringa da scrivere è lunga devo mettere a fine riga uno  \
altrimenti mi risulta come errore

 es --> document.getElementById('display').innerHTML='Ciao  da document \
dkjfhskdfhsdkffkha';

SE utilizzo il BACKTIC non c'è bisogno di utilizzare \ ma posso scrivere direttamente nella riga successiva


######## INSERIMENTO TAG HTML IN UNA STRINGA ########
es -->let stringa1='questa <b> stringa  </b> <br> ha html </br>'
    posso inserire qualsiasi tipo di tag

######UTILIZZO APICI IN UNA STRINGA ######
 es --> let string2  = 'E' arrivata l'estate  (javascrip non sa che ' è di E' ma pensa sia
        un ' di chiusura quindi basta inserire \') sessa cosa con " " o con \
        questa cosa non succede con  ` `

############### CONVERSIONE DA NUMERO A STRINGA ###########
1 --> let num =6; ------ num =String(num);
2--> let num =6; ------ num= ''+num;
